# F:\CRM 2.0\ERP\sms_service\rocket_sms_api.py
import requests
import json
from django.conf import settings
from django.utils import timezone
from .models import SMSSettings, SMSMessage
from django.contrib.auth import get_user_model

User = get_user_model()

class RocketSMSAPI:
    """
    –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API Rocket SMS
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç SMS —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å rocket-sms.by
    """
    
    def __init__(self):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∞—Å—Å
        –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        """
        try:
            # –ë–µ—Ä—ë–º –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ SMS –∏–∑ –±–∞–∑—ã
            self.settings = SMSSettings.objects.filter(is_active=True).first()
            
            if not self.settings:
                raise Exception("–ù–µ –Ω–∞–π–¥–µ–Ω—ã –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ SMS –≤ —Å–∏—Å—Ç–µ–º–µ")
                
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è API
            self.api_url = self.settings.api_url
            self.username = self.settings.username
            self.password = self.settings.password
            self.sender_name = self.settings.sender_name
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ RocketSMSAPI: {e}")
            self.settings = None
    
    def check_balance(self):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –Ω–∞ —Å—á–µ—Ç—É Rocket SMS
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: —Å–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –±–∞–ª–∞–Ω—Å–µ –∏–ª–∏ –æ—à–∏–±–∫–µ
        """
        if not self.settings:
            return {'success': False, 'error': '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ SMS –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'}
        
        try:
            # URL –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
            balance_url = "http://api.rocketsms.by/json/balance"
            
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è POST –∑–∞–ø—Ä–æ—Å–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ (–∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ PHP)
            data = f"username={self.username}&password={self.password}"
            
            print(f"üì° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞: {balance_url}")
            print(f"üì§ –î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞: {data}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º POST –∑–∞–ø—Ä–æ—Å –∫ API —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
            response = requests.post(
                balance_url, 
                data=data, 
                headers={'Content-Type': 'application/x-www-form-urlencoded'},
                timeout=30
            )
            
            print(f"üì• –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
            print(f"üìÑ –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.text}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
            if response.status_code == 200:
                if response.text.strip():  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—Ç–≤–µ—Ç –Ω–µ –ø—É—Å—Ç–æ–π
                    try:
                        result = response.json()
                        
                        # –ï—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∞ –≤ –æ—Ç–≤–µ—Ç–µ
                        if 'error' in result:
                            return {
                                'success': False,
                                'error': f'–û—à–∏–±–∫–∞ API: {result["error"]}',
                                'raw_response': response.text
                            }
                        
                        # –ï—Å–ª–∏ –≤—Å—ë —É—Å–ø–µ—à–Ω–æ
                        return {
                            'success': True,
                            'balance': result.get('balance', 0),
                            'currency': result.get('currency', 'BYN'),
                            'raw_response': response.text
                        }
                    except json.JSONDecodeError:
                        return {
                            'success': False,
                            'error': f'–ù–µ–≤–µ—Ä–Ω—ã–π JSON –æ—Ç–≤–µ—Ç: {response.text}',
                            'raw_response': response.text
                        }
                else:
                    return {
                        'success': False,
                        'error': '–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç API',
                        'raw_response': response.text
                    }
            else:
                return {
                    'success': False,
                    'error': f'–û—à–∏–±–∫–∞ HTTP: {response.status_code}',
                    'raw_response': response.text
                }
                
        except requests.exceptions.Timeout:
            return {'success': False, 'error': '–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞'}
        except requests.exceptions.RequestException as e:
            return {'success': False, 'error': f'–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {str(e)}'}
        except Exception as e:
            return {'success': False, 'error': f'–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}'}
        
    def send_single_sms(self, phone_number, message_text, user, recipient_name=""):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–¥–Ω–æ SMS —Å–æ–æ–±—â–µ–Ω–∏–µ
        
        phone_number: –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: +375291234567)
        message_text: —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        user: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç (–¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏)
        recipient_name: –∏–º—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
        
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: —Å–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –æ—Ç–ø—Ä–∞–≤–∫–∏
        """
        if not self.settings:
            return {'success': False, 'error': '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ SMS –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'}
        
        # –°–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏–∏ SMS —Å—Ä–∞–∑—É
        sms_message = SMSMessage.objects.create(
            phone_number=phone_number,
            recipient_name=recipient_name,
            message_text=message_text,
            status='pending',
            sent_by=user
        )
        print(f"üìù –°–æ–∑–¥–∞–Ω–∞ –∑–∞–ø–∏—Å—å SMS –≤ –ë–î: ID={sms_message.pk}, —Å—Ç–∞—Ç—É—Å={sms_message.status}")
        
        try:
            # –û—á–∏—â–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (—É–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã, –¥–µ—Ñ–∏—Å—ã)
            clean_phone = phone_number.replace(' ', '').replace('-', '').replace('(', '').replace(')', '')
            
            # URL –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
            # URL –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ (–∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ)
            sms_url = "http://api.rocketsms.by/json/send"

            # –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ (–∫–∞–∫ –≤ PHP –ø—Ä–∏–º–µ—Ä–µ)
            data = f"username={self.username}&password={self.password}&phone={clean_phone}&text={message_text}"

            print(f"üì° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º SMS –Ω–∞: {sms_url}")
            print(f"üì§ –î–∞–Ω–Ω—ã–µ: {data}")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º POST –∑–∞–ø—Ä–æ—Å –∫ API
            response = requests.post(
                sms_url, 
                data=data,
                headers={'Content-Type': 'application/x-www-form-urlencoded'},
                timeout=30
            )

            print(f"üì• –û—Ç–≤–µ—Ç SMS API: {response.text}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç API –≤ –±–∞–∑—É
            sms_message.api_response = response.text
            
            if response.status_code == 200:
                try:
                    result = response.json()
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –æ—à–∏–±–∫–∞ –≤ –æ—Ç–≤–µ—Ç–µ
                    if 'error' in result:
                        # –ï—Å—Ç—å –æ—à–∏–±–∫–∞ –æ—Ç API
                        sms_message.status = 'failed'
                        sms_message.save()
                        return {
                            'success': False,
                            'error': f'–û—à–∏–±–∫–∞ API: {result["error"]}',
                            'sms_record_id': sms_message.id
                        }
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ ID —Å–æ–æ–±—â–µ–Ω–∏—è (–∑–Ω–∞—á–∏—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ)
                    if 'id' in result:
                        # SMS –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
                        sms_message.status = 'sent'
                        sms_message.rocket_sms_id = str(result['id'])
                        
                        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏–∑ –æ—Ç–≤–µ—Ç–∞
                        cost_info = result.get('cost', {})
                        if isinstance(cost_info, dict):
                            sms_message.cost = cost_info.get('money', 0)
                        else:
                            sms_message.cost = cost_info
                            
                        sms_message.sent_at = timezone.now()
                        sms_message.save()
                        
                        return {
                            'success': True,
                            'message_id': str(result['id']),
                            'cost': sms_message.cost,
                            'status': result.get('status', 'SENT'),
                            'sms_record_id': sms_message.id
                        }
                    else:
                        # –ù–µ—Ç ID –≤ –æ—Ç–≤–µ—Ç–µ - —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫
                        sms_message.status = 'failed'
                        sms_message.save()
                        return {
                            'success': False,
                            'error': 'API –Ω–µ –≤–µ—Ä–Ω—É–ª ID —Å–æ–æ–±—â–µ–Ω–∏—è',
                            'sms_record_id': sms_message.id
                        }
                        
                except json.JSONDecodeError:
                    # –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON
                    sms_message.status = 'failed'
                    sms_message.save()
                    return {
                        'success': False,
                        'error': '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç API',
                        'sms_record_id': sms_message.id
                    }
            else:
                # –û—à–∏–±–∫–∞ HTTP
                sms_message.status = 'failed'
                sms_message.save()
                return {
                    'success': False,
                    'error': f'–û—à–∏–±–∫–∞ HTTP: {response.status_code}',
                    'sms_record_id': sms_message.id
                }
                
        except requests.exceptions.Timeout:
            sms_message.status = 'failed'
            sms_message.save()
            return {
                'success': False,
                'error': '–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞',
                'sms_record_id': sms_message.id
            }
        except Exception as e:
            sms_message.status = 'failed'
            sms_message.save()
            return {
                'success': False,
                'error': f'–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {str(e)}',
                'sms_record_id': sms_message.id
            }
    def test_connection(self):
        """
        –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å API
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: True –µ—Å–ª–∏ –≤—Å—ë —Ä–∞–±–æ—Ç–∞–µ—Ç, False –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã
        """
        balance_result = self.check_balance()
        return balance_result.get('success', False)