import sqlite3
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
from datetime import datetime  # –ù–æ–≤—ã–π –∏–º–ø–æ—Ä—Ç

TOKEN = "7763554734:AAGDA226E22vMeqpCTh7w6HlSLGct8W3pyY"
DB_PATH = "../db.sqlite3"  # –ø—É—Ç—å –∫ –±–∞–∑–µ

def get_urgent_orders():
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("""
        SELECT id, status, due_date, repaired_item
        FROM orders_order 
        WHERE status != 'done'
          AND due_date IS NOT NULL
          AND due_date != '-'
        ORDER BY due_date ASC, id ASC
        LIMIT 5
    """)
    orders = cursor.fetchall()
    conn.close()
    return orders

def rus_status(status):
    status = status.lower()
    if status == "new":
        return "–ù–æ–≤—ã–π"
    if status == "in_progress":
        return "–≤ —Ä–∞–±–æ—Ç–µ"
    if status == "awaiting":
        return "–û–∂–∏–¥–∞–µ—Ç"
    return status

def format_date(due_date):
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º "2025-06-08" –≤ "06.08"
    try:
        dt = datetime.strptime(due_date, "%Y-%m-%d")
        return dt.strftime("%d.%m")
    except Exception:
        return due_date  # –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å ‚Äî –≤–µ—Ä–Ω–µ–º –∫–∞–∫ –µ—Å—Ç—å

async def urgent_orders_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    orders = get_urgent_orders()
    if not orders:
        text = "–ù–µ—Ç —Å—Ä–æ—á–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ üöÄ"
    else:
        text = "üî• –°–∞–º—ã–µ —Å—Ä–æ—á–Ω—ã–µ –∑–∞–∫–∞–∑—ã:\n"
        for order in orders:
            order_id, status, due_date, repaired_item = order
            text += (
                f"‚Ä¢ –ó–∞–∫–∞–∑ {order_id} | —Å—Ç–∞—Ç—É—Å: {rus_status(status)} | "
                f"–ò–∑–¥–µ–ª–∏–µ: {repaired_item} | –°—Ä–æ–∫: {format_date(due_date)}\n"
            )
    await context.bot.send_message(chat_id=update.effective_chat.id, text=text)

def main():
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("hot_orders", urgent_orders_command))
    app.run_polling()

if __name__ == "__main__":
    main()