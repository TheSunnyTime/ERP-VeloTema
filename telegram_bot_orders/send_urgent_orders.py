import sqlite3
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
from datetime import datetime

TOKEN = "7763554734:AAGDA226E22vMeqpCTh7w6HlSLGct8W3pyY"
DB_PATH = "../db.sqlite3"  # –ø—É—Ç—å –∫ –±–∞–∑–µ

def get_orders(order_type_id, limit):
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    # –î–ª—è —Ä–µ–º–æ–Ω—Ç–∞ –¥–æ–±–∞–≤–ª—è–µ–º repaired_item
    if order_type_id == 1:
        cursor.execute("""
            SELECT id, status, due_date, repaired_item
            FROM orders_order 
            WHERE status NOT IN ('done', 'ready', 'issued', 'cancelled')
              AND due_date IS NOT NULL
              AND due_date != '-'
              AND order_type_id = 1
            ORDER BY due_date ASC, id ASC
            LIMIT ?
        """, (limit,))
    else:  # –î–ª—è –ø—Ä–æ–¥–∞–∂–∏ –ø–æ–ª–µ repaired_item –Ω–µ –Ω—É–∂–Ω–æ
        cursor.execute("""
            SELECT id, status, due_date
            FROM orders_order 
            WHERE status NOT IN ('done', 'ready', 'issued', 'cancelled')
              AND due_date IS NOT NULL
              AND due_date != '-'
              AND order_type_id = 2
            ORDER BY due_date ASC, id ASC
            LIMIT ?
        """, (limit,))
    orders = cursor.fetchall()
    conn.close()
    return orders

def rus_status(status):
    status = status.lower()
    if status == "new":
        return "–ù–æ–≤—ã–π"
    if status == "in_progress":
        return "–≤ —Ä–∞–±–æ—Ç–µ"
    if status == "awaiting":
        return "–û–∂–∏–¥–∞–µ—Ç"
    return status

def format_date(due_date):
    try:
        dt = datetime.strptime(due_date, "%Y-%m-%d")
        return dt.strftime("%d.%m")
    except Exception:
        return due_date

async def hot_orders_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ü–æ–ª—É—á–∞–µ–º 3 —Ä–µ–º–æ–Ω—Ç–∞ –∏ 3 –ø—Ä–æ–¥–∞–∂–∏
    repairs = get_orders(1, 3)
    sales = get_orders(2, 3)
    text = ""

    if not repairs and not sales:
        text = "–ù–µ—Ç —Å—Ä–æ—á–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ üöÄ"
    else:
        if repairs:
            text += "üîß –°—Ä–æ—á–Ω—ã–µ –∑–∞–∫–∞–∑—ã (–†–µ–º–æ–Ω—Ç):\n"
            for order in repairs:
                order_id, status, due_date, repaired_item = order
                text += (
                    f"‚Ä¢ –ó–∞–∫–∞–∑ {order_id} | –°—Ç–∞—Ç—É—Å: {rus_status(status)} | "
                    f"–ò–∑–¥–µ–ª–∏–µ: {repaired_item} | –°—Ä–æ–∫: {format_date(due_date)}\n"
                )
        if sales:
            if text:
                text += "\n"
            text += "üõí –°—Ä–æ—á–Ω—ã–µ –∑–∞–∫–∞–∑—ã (–ü—Ä–æ–¥–∞–∂–∞):\n"
            for order in sales:
                order_id, status, due_date = order
                text += (
                    f"‚Ä¢ –ó–∞–∫–∞–∑ {order_id} | –°—Ç–∞—Ç—É—Å: {rus_status(status)} | "
                    f"–°—Ä–æ–∫: {format_date(due_date)}\n"
                )

    await context.bot.send_message(chat_id=update.effective_chat.id, text=text)

def main():
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("hot_orders", hot_orders_command))
    app.run_polling()

if __name__ == "__main__":
    main()