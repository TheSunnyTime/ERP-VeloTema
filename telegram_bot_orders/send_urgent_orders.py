import sqlite3
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
from datetime import datetime, time, timedelta
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import pytz

TOKEN = "7763554734:AAGDA226E22vMeqpCTh7w6HlSLGct8W3pyY"
DB_PATH = "../db.sqlite3"  # –ø—É—Ç—å –∫ –±–∞–∑–µ

# ID —á–∞—Ç–∞, –∫—É–¥–∞ —Å–ª–∞—Ç—å –∞–≤—Ç–æ—Ä–∞—Å—Å—ã–ª–∫—É (—É–∫–∞–∂–∏ —Å–≤–æ–π chat_id, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –≤ –≥—Ä—É–ø–ø—É –∏–ª–∏ —Å–µ–±–µ)
CHAT_ID = "–¢–í–û–ô_CHAT_ID"

def get_orders(order_type_id, limit):
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    if order_type_id == 1:
        cursor.execute("""
            SELECT id, status, due_date, repaired_item
            FROM orders_order 
            WHERE status NOT IN ('done', 'ready', 'issued', 'cancelled')
              AND due_date IS NOT NULL
              AND due_date != '-'
              AND order_type_id = 1
            ORDER BY due_date ASC, id ASC
            LIMIT ?
        """, (limit,))
    else:
        cursor.execute("""
            SELECT id, status, due_date
            FROM orders_order 
            WHERE status NOT IN ('done', 'ready', 'issued', 'cancelled')
              AND due_date IS NOT NULL
              AND due_date != '-'
              AND order_type_id = 2
            ORDER BY due_date ASC, id ASC
            LIMIT ?
        """, (limit,))
    orders = cursor.fetchall()
    conn.close()
    return orders

def rus_status(status):
    status = status.lower()
    if status == "new":
        return "–ù–æ–≤—ã–π"
    if status == "in_progress":
        return "–í —Ä–∞–±–æ—Ç–µ"
    if status == "awaiting":
        return "–û–∂–∏–¥–∞–µ—Ç"
    return status

def format_date(due_date):
    try:
        dt = datetime.strptime(due_date, "%Y-%m-%d")
        return dt.strftime("%d.%m")
    except Exception:
        return due_date

async def send_hot_orders(context: ContextTypes.DEFAULT_TYPE):
    repairs = get_orders(1, 3)
    sales = get_orders(2, 3)
    text = ""

    if not repairs and not sales:
        text = "–ù–µ—Ç —Å—Ä–æ—á–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ üöÄ"
    else:
        if repairs:
            text += "üîß –°—Ä–æ—á–Ω—ã–µ –∑–∞–∫–∞–∑—ã (–†–µ–º–æ–Ω—Ç):\n"
            for order in repairs:
                order_id, status, due_date, repaired_item = order
                text += (
                    f"‚Ä¢ –ó–∞–∫–∞–∑ {order_id} | –°—Ç–∞—Ç—É—Å: {rus_status(status)} | "
                    f"–ò–∑–¥–µ–ª–∏–µ: {repaired_item} | –°—Ä–æ–∫: {format_date(due_date)}\n"
                )
        if sales:
            if text:
                text += "\n"
            text += "üõí –°—Ä–æ—á–Ω—ã–µ –∑–∞–∫–∞–∑—ã (–ü—Ä–æ–¥–∞–∂–∞):\n"
            for order in sales:
                order_id, status, due_date = order
                text += (
                    f"‚Ä¢ –ó–∞–∫–∞–∑ {order_id} | –°—Ç–∞—Ç—É—Å: {rus_status(status)} | "
                    f"–°—Ä–æ–∫: {format_date(due_date)}\n"
                )

    await context.bot.send_message(chat_id=CHAT_ID, text=text)

async def hot_orders_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await send_hot_orders(context)

def main():
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("hot_orders", hot_orders_command))

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    scheduler = AsyncIOScheduler(timezone=pytz.timezone('Europe/Moscow'))
    # –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 10:00 –ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏
    scheduler.add_job(send_hot_orders, 'cron', hour=10, minute=0, args=[app.bot])
    scheduler.start()

    app.run_polling()

if __name__ == "__main__":
    main()